{
  "matrices": [
    {
      "title": "Data Integrity (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          should.exist(data, 'Expected data.');\n          const proof = data.proof;\n          should.exist(proof, 'Expected proof to exist.');\n          const validType = isObjectOrArrayOfObjects(proof);\n          validType.should.equal(true, 'Expected proof to be' +\n            'either an object or an unordered set of objects.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:08e70c4b-1ce6-4b3c-9f3b-f18a5972b145",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.id) {\n              let result;\n              let err;\n              try {\n                result = new URL(proof.id);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n                'to not error.');\n              should.exist(result, 'Expected \"proof.id\" to be a URL.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:2358f7d9-a133-4aac-a175-b76bb3254ff0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string', 'Expected \"proof.type\" to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:4a6e92e5-9257-4b44-8138-cfdd48b5e63b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(true);\n\n            if(proof.type === 'DataIntegrityProof') {\n              const expectedContexts = [\n                'https://www.w3.org/ns/credentials/v2',\n                'https://w3id.org/security/data-integrity/v2'\n              ];\n              const hasExpectedContexts = expectedContexts.some(\n                value => data['@context'].includes(value));\n              hasExpectedContexts.should.equal(true);\n            }\n\n            if(proof.type === 'Ed25519Signature2020') {\n              const expectedContext =\n                'https://w3id.org/security/suites/ed25519-2020/v1';\n              const hasExpectedContext =\n                data['@context'].includes(expectedContext);\n              hasExpectedContext.should.equal(true);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:21bfd363-2d02-4b56-875f-294f8efd4ea7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:109:42)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n              this.test.cell = {columnId: vendorName, rowId: this.test.title};\n              for(const proof of proofs) {\n                proof.should.have.property('cryptosuite');\n                proof.cryptosuite.should.be.a('string', 'Expected ' +\n                  '\"cryptosuite\" property to be a string.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:15913c61-13cf-4ce4-b718-550c07926cca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.created) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.created.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:2b2a54db-6435-4399-921a-c8523b8d726e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.expires) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.expires.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:8fed8cab-2f39-41af-b965-5c9e8c13341c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('verificationMethod');\n              let result;\n              let err;\n              try {\n                result = new URL(proof.verificationMethod);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the ' +\n                '\"verificationMethod\" to not error.');\n              should.exist(result, 'Expected \"verificationMethod\" ' +\n                'to be a URL');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:fb0773a9-b8b9-42b6-a9e3-d8886cd69cdb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('proofPurpose');\n              proof.proofPurpose.should.be.a('string');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:726bae3d-fb1e-42ed-9a93-65a510de2322",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('proofValue');\n            proof.proofValue.should.be.a('string');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:5a92d192-1278-4c36-bf92-d4c37bb9a097",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const multibase = 'z';\n          proofs.some(proof => {\n            const value = proof?.proofValue;\n            return value.startsWith(multibase) && shouldBeBs58(value);\n          }).should.equal(\n            true,\n            'Expected \"proof.proofValue\" to be multibase-encoded base58-btc ' +\n            'value.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:6952a193-759e-4d64-8c31-e0c811793bea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.domain) {\n              const validType = isStringOrArrayOfStrings(proof.domain);\n              validType.should.equal(true, 'Expected ' +\n                '\"proof.domain\" to be either a string or an unordered ' +\n                'set of strings.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:01182b2b-b9ae-4995-beb3-9d3a6b29796b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.challenge) {\n                // domain must be specified\n                should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n                  'to be specified.');\n                proof.challenge.should.be.a('string', 'Expected ' +\n                  '\"proof.challenge\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:d5b451bf-f6dd-4b94-b73a-5cd065f40e4b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.previousProof) {\n                proof.previousProof.should.be.a('string', 'Expected ' +\n                  '\"proof.previousProof\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:138bf47d-ec1b-415d-860f-943b9d7910c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.nonce) {\n                proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n                  'to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:0511c5f5-dae2-4950-8d04-ef0cf0235dee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          if(!issuer) {\n            throw new Error(`Expected ${vendorName} to have an issuer.`);\n          }\n          data = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 368,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1056,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "5gzn93MqR609Z29HjJl-B",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:e61ad7fe-1a84-4567-986e-4da9201fc5c4"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          should.exist(data, 'Expected data.');\n          const proof = data.proof;\n          should.exist(proof, 'Expected proof to exist.');\n          const validType = isObjectOrArrayOfObjects(proof);\n          validType.should.equal(true, 'Expected proof to be' +\n            'either an object or an unordered set of objects.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:0dde10be-3f15-4d85-a2c2-05f0f897b57e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.id) {\n              let result;\n              let err;\n              try {\n                result = new URL(proof.id);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n                'to not error.');\n              should.exist(result, 'Expected \"proof.id\" to be a URL.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:82018295-0104-42cd-90fe-e64c084d54ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string', 'Expected \"proof.type\" to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:1d30c58f-f4b5-41e7-921e-b6ad645c74f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(true);\n\n            if(proof.type === 'DataIntegrityProof') {\n              const expectedContexts = [\n                'https://www.w3.org/ns/credentials/v2',\n                'https://w3id.org/security/data-integrity/v2'\n              ];\n              const hasExpectedContexts = expectedContexts.some(\n                value => data['@context'].includes(value));\n              hasExpectedContexts.should.equal(true);\n            }\n\n            if(proof.type === 'Ed25519Signature2020') {\n              const expectedContext =\n                'https://w3id.org/security/suites/ed25519-2020/v1';\n              const hasExpectedContext =\n                data['@context'].includes(expectedContext);\n              hasExpectedContext.should.equal(true);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:d37a234d-b5db-4aec-a986-e853590d4b62",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:109:42)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n              this.test.cell = {columnId: vendorName, rowId: this.test.title};\n              for(const proof of proofs) {\n                proof.should.have.property('cryptosuite');\n                proof.cryptosuite.should.be.a('string', 'Expected ' +\n                  '\"cryptosuite\" property to be a string.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:a5f3d8e9-d0f6-4ee0-b7d8-1af307e91429",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.created) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.created.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:cd68391f-a77c-4a33-8efa-a2af28e7a61b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.expires) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.expires.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:ead91726-ace7-4047-93f1-fd9de772112e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('verificationMethod');\n              let result;\n              let err;\n              try {\n                result = new URL(proof.verificationMethod);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the ' +\n                '\"verificationMethod\" to not error.');\n              should.exist(result, 'Expected \"verificationMethod\" ' +\n                'to be a URL');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:acd5ae9c-9405-47b7-b763-f5af9a4cef0d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('proofPurpose');\n              proof.proofPurpose.should.be.a('string');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:c1fc4a04-1be4-44f3-847b-a6392822e22d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('proofValue');\n            proof.proofValue.should.be.a('string');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:78b3ec91-33f3-4501-bed4-b17f63c99119",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const multibase = 'z';\n          proofs.some(proof => {\n            const value = proof?.proofValue;\n            return value.startsWith(multibase) && shouldBeBs58(value);\n          }).should.equal(\n            true,\n            'Expected \"proof.proofValue\" to be multibase-encoded base58-btc ' +\n            'value.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:b3d2834c-085b-40b9-bc2c-f395b4804156",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.domain) {\n              const validType = isStringOrArrayOfStrings(proof.domain);\n              validType.should.equal(true, 'Expected ' +\n                '\"proof.domain\" to be either a string or an unordered ' +\n                'set of strings.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:1d608745-de87-4f74-afd0-0aeab4c12b3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.challenge) {\n                // domain must be specified\n                should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n                  'to be specified.');\n                proof.challenge.should.be.a('string', 'Expected ' +\n                  '\"proof.challenge\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:c17b4e9f-464b-47d8-8183-16577c65dc4b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.previousProof) {\n                proof.previousProof.should.be.a('string', 'Expected ' +\n                  '\"proof.previousProof\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:fa055962-f5f1-43e7-a415-a08817e71dfd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.nonce) {\n                proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n                  'to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:5ee0d54c-6454-47de-b497-e90625afed1c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          if(!issuer) {\n            throw new Error(`Expected ${vendorName} to have an issuer.`);\n          }\n          data = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 625,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "5gzn93MqR609Z29HjJl-B",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:820af60f-79d1-4300-9c70-e99ebe45e2c1"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          should.exist(data, 'Expected data.');\n          const proof = data.proof;\n          should.exist(proof, 'Expected proof to exist.');\n          const validType = isObjectOrArrayOfObjects(proof);\n          validType.should.equal(true, 'Expected proof to be' +\n            'either an object or an unordered set of objects.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:f91f3eee-2aa9-4fa1-a295-ad2467910691",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.id) {\n              let result;\n              let err;\n              try {\n                result = new URL(proof.id);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n                'to not error.');\n              should.exist(result, 'Expected \"proof.id\" to be a URL.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:0539c2c5-462b-467b-a585-16f9a3831b04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string', 'Expected \"proof.type\" to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:b1272efc-e45d-444d-ba47-92cdf1b90c6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(true);\n\n            if(proof.type === 'DataIntegrityProof') {\n              const expectedContexts = [\n                'https://www.w3.org/ns/credentials/v2',\n                'https://w3id.org/security/data-integrity/v2'\n              ];\n              const hasExpectedContexts = expectedContexts.some(\n                value => data['@context'].includes(value));\n              hasExpectedContexts.should.equal(true);\n            }\n\n            if(proof.type === 'Ed25519Signature2020') {\n              const expectedContext =\n                'https://w3id.org/security/suites/ed25519-2020/v1';\n              const hasExpectedContext =\n                data['@context'].includes(expectedContext);\n              hasExpectedContext.should.equal(true);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:4a1e3e7d-5288-4e51-a48b-cf3727870255",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:109:42)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n              this.test.cell = {columnId: vendorName, rowId: this.test.title};\n              for(const proof of proofs) {\n                proof.should.have.property('cryptosuite');\n                proof.cryptosuite.should.be.a('string', 'Expected ' +\n                  '\"cryptosuite\" property to be a string.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:2dbdef75-739f-4a0d-8017-33da4e2488b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.created) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.created.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:43474f17-fce1-46a7-a8ab-21b1ece33489",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.expires) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.expires.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:7353c6d0-7ddd-43e5-9e7f-4c77d1d35752",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('verificationMethod');\n              let result;\n              let err;\n              try {\n                result = new URL(proof.verificationMethod);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the ' +\n                '\"verificationMethod\" to not error.');\n              should.exist(result, 'Expected \"verificationMethod\" ' +\n                'to be a URL');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:d637234e-1775-4a57-9247-6ae37dfe10c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('proofPurpose');\n              proof.proofPurpose.should.be.a('string');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:9ad5981b-1b46-410d-bdd3-9efe04dc0484",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('proofValue');\n            proof.proofValue.should.be.a('string');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:2cfe8221-e0d6-44c0-aa8c-84e756b720b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const multibase = 'z';\n          proofs.some(proof => {\n            const value = proof?.proofValue;\n            return value.startsWith(multibase) && shouldBeBs58(value);\n          }).should.equal(\n            true,\n            'Expected \"proof.proofValue\" to be multibase-encoded base58-btc ' +\n            'value.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:a13f069e-8b09-4dab-8fb9-af2e1328392b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.domain) {\n              const validType = isStringOrArrayOfStrings(proof.domain);\n              validType.should.equal(true, 'Expected ' +\n                '\"proof.domain\" to be either a string or an unordered ' +\n                'set of strings.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:508bde27-d257-4922-b62c-d19746a611bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.challenge) {\n                // domain must be specified\n                should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n                  'to be specified.');\n                proof.challenge.should.be.a('string', 'Expected ' +\n                  '\"proof.challenge\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:b41fbb79-ce77-4e7b-9982-b5a0f48712f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.previousProof) {\n                proof.previousProof.should.be.a('string', 'Expected ' +\n                  '\"proof.previousProof\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:e264a1a2-6e37-4efe-8f4c-53e77b6ae8a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.nonce) {\n                proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n                  'to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:d26fef12-1feb-4192-9ece-601ca112d846",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          if(!issuer) {\n            throw new Error(`Expected ${vendorName} to have an issuer.`);\n          }\n          data = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 357,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "5gzn93MqR609Z29HjJl-B",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:3eb47b55-e8e5-49ce-b776-c15163456136"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "oD2T__H5se276wVwLw8AE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:3402d24f-7222-4e9d-9cf0-a1c67736d54c",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          should.exist(data, 'Expected data.');\n          const proof = data.proof;\n          should.exist(proof, 'Expected proof to exist.');\n          const validType = isObjectOrArrayOfObjects(proof);\n          validType.should.equal(true, 'Expected proof to be' +\n            'either an object or an unordered set of objects.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:08e70c4b-1ce6-4b3c-9f3b-f18a5972b145",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          should.exist(data, 'Expected data.');\n          const proof = data.proof;\n          should.exist(proof, 'Expected proof to exist.');\n          const validType = isObjectOrArrayOfObjects(proof);\n          validType.should.equal(true, 'Expected proof to be' +\n            'either an object or an unordered set of objects.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:0dde10be-3f15-4d85-a2c2-05f0f897b57e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          should.exist(data, 'Expected data.');\n          const proof = data.proof;\n          should.exist(proof, 'Expected proof to exist.');\n          const validType = isObjectOrArrayOfObjects(proof);\n          validType.should.equal(true, 'Expected proof to be' +\n            'either an object or an unordered set of objects.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:f91f3eee-2aa9-4fa1-a295-ad2467910691",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.id) {\n              let result;\n              let err;\n              try {\n                result = new URL(proof.id);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n                'to not error.');\n              should.exist(result, 'Expected \"proof.id\" to be a URL.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:2358f7d9-a133-4aac-a175-b76bb3254ff0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.id) {\n              let result;\n              let err;\n              try {\n                result = new URL(proof.id);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n                'to not error.');\n              should.exist(result, 'Expected \"proof.id\" to be a URL.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:82018295-0104-42cd-90fe-e64c084d54ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.id) {\n              let result;\n              let err;\n              try {\n                result = new URL(proof.id);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n                'to not error.');\n              should.exist(result, 'Expected \"proof.id\" to be a URL.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:0539c2c5-462b-467b-a585-16f9a3831b04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string', 'Expected \"proof.type\" to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:4a6e92e5-9257-4b44-8138-cfdd48b5e63b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string', 'Expected \"proof.type\" to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:1d30c58f-f4b5-41e7-921e-b6ad645c74f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string', 'Expected \"proof.type\" to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:b1272efc-e45d-444d-ba47-92cdf1b90c6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(true);\n\n            if(proof.type === 'DataIntegrityProof') {\n              const expectedContexts = [\n                'https://www.w3.org/ns/credentials/v2',\n                'https://w3id.org/security/data-integrity/v2'\n              ];\n              const hasExpectedContexts = expectedContexts.some(\n                value => data['@context'].includes(value));\n              hasExpectedContexts.should.equal(true);\n            }\n\n            if(proof.type === 'Ed25519Signature2020') {\n              const expectedContext =\n                'https://w3id.org/security/suites/ed25519-2020/v1';\n              const hasExpectedContext =\n                data['@context'].includes(expectedContext);\n              hasExpectedContext.should.equal(true);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:21bfd363-2d02-4b56-875f-294f8efd4ea7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:109:42)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(true);\n\n            if(proof.type === 'DataIntegrityProof') {\n              const expectedContexts = [\n                'https://www.w3.org/ns/credentials/v2',\n                'https://w3id.org/security/data-integrity/v2'\n              ];\n              const hasExpectedContexts = expectedContexts.some(\n                value => data['@context'].includes(value));\n              hasExpectedContexts.should.equal(true);\n            }\n\n            if(proof.type === 'Ed25519Signature2020') {\n              const expectedContext =\n                'https://w3id.org/security/suites/ed25519-2020/v1';\n              const hasExpectedContext =\n                data['@context'].includes(expectedContext);\n              hasExpectedContext.should.equal(true);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:d37a234d-b5db-4aec-a986-e853590d4b62",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:109:42)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(true);\n\n            if(proof.type === 'DataIntegrityProof') {\n              const expectedContexts = [\n                'https://www.w3.org/ns/credentials/v2',\n                'https://w3id.org/security/data-integrity/v2'\n              ];\n              const hasExpectedContexts = expectedContexts.some(\n                value => data['@context'].includes(value));\n              hasExpectedContexts.should.equal(true);\n            }\n\n            if(proof.type === 'Ed25519Signature2020') {\n              const expectedContext =\n                'https://w3id.org/security/suites/ed25519-2020/v1';\n              const hasExpectedContext =\n                data['@context'].includes(expectedContext);\n              hasExpectedContext.should.equal(true);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:4a1e3e7d-5288-4e51-a48b-cf3727870255",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:109:42)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n              this.test.cell = {columnId: vendorName, rowId: this.test.title};\n              for(const proof of proofs) {\n                proof.should.have.property('cryptosuite');\n                proof.cryptosuite.should.be.a('string', 'Expected ' +\n                  '\"cryptosuite\" property to be a string.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:15913c61-13cf-4ce4-b718-550c07926cca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n              this.test.cell = {columnId: vendorName, rowId: this.test.title};\n              for(const proof of proofs) {\n                proof.should.have.property('cryptosuite');\n                proof.cryptosuite.should.be.a('string', 'Expected ' +\n                  '\"cryptosuite\" property to be a string.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:a5f3d8e9-d0f6-4ee0-b7d8-1af307e91429",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n              this.test.cell = {columnId: vendorName, rowId: this.test.title};\n              for(const proof of proofs) {\n                proof.should.have.property('cryptosuite');\n                proof.cryptosuite.should.be.a('string', 'Expected ' +\n                  '\"cryptosuite\" property to be a string.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:2dbdef75-739f-4a0d-8017-33da4e2488b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.created) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.created.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:2b2a54db-6435-4399-921a-c8523b8d726e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.created) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.created.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:cd68391f-a77c-4a33-8efa-a2af28e7a61b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.created) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.created.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:43474f17-fce1-46a7-a8ab-21b1ece33489",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.expires) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.expires.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:8fed8cab-2f39-41af-b965-5c9e8c13341c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.expires) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.expires.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:ead91726-ace7-4047-93f1-fd9de772112e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.expires) {\n              // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n              // value\n              proof.expires.should.match(dateRegex);\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:7353c6d0-7ddd-43e5-9e7f-4c77d1d35752",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('verificationMethod');\n              let result;\n              let err;\n              try {\n                result = new URL(proof.verificationMethod);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the ' +\n                '\"verificationMethod\" to not error.');\n              should.exist(result, 'Expected \"verificationMethod\" ' +\n                'to be a URL');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:fb0773a9-b8b9-42b6-a9e3-d8886cd69cdb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('verificationMethod');\n              let result;\n              let err;\n              try {\n                result = new URL(proof.verificationMethod);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the ' +\n                '\"verificationMethod\" to not error.');\n              should.exist(result, 'Expected \"verificationMethod\" ' +\n                'to be a URL');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:acd5ae9c-9405-47b7-b763-f5af9a4cef0d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('verificationMethod');\n              let result;\n              let err;\n              try {\n                result = new URL(proof.verificationMethod);\n              } catch(e) {\n                err = e;\n              }\n              should.not.exist(err, 'Expected URL check of the ' +\n                '\"verificationMethod\" to not error.');\n              should.exist(result, 'Expected \"verificationMethod\" ' +\n                'to be a URL');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:d637234e-1775-4a57-9247-6ae37dfe10c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('proofPurpose');\n              proof.proofPurpose.should.be.a('string');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:726bae3d-fb1e-42ed-9a93-65a510de2322",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('proofPurpose');\n              proof.proofPurpose.should.be.a('string');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:c1fc4a04-1be4-44f3-847b-a6392822e22d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              proof.should.have.property('proofPurpose');\n              proof.proofPurpose.should.be.a('string');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:9ad5981b-1b46-410d-bdd3-9efe04dc0484",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('proofValue');\n            proof.proofValue.should.be.a('string');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:5a92d192-1278-4c36-bf92-d4c37bb9a097",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('proofValue');\n            proof.proofValue.should.be.a('string');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:78b3ec91-33f3-4501-bed4-b17f63c99119",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('proofValue');\n            proof.proofValue.should.be.a('string');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:2cfe8221-e0d6-44c0-aa8c-84e756b720b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const multibase = 'z';\n          proofs.some(proof => {\n            const value = proof?.proofValue;\n            return value.startsWith(multibase) && shouldBeBs58(value);\n          }).should.equal(\n            true,\n            'Expected \"proof.proofValue\" to be multibase-encoded base58-btc ' +\n            'value.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:6952a193-759e-4d64-8c31-e0c811793bea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const multibase = 'z';\n          proofs.some(proof => {\n            const value = proof?.proofValue;\n            return value.startsWith(multibase) && shouldBeBs58(value);\n          }).should.equal(\n            true,\n            'Expected \"proof.proofValue\" to be multibase-encoded base58-btc ' +\n            'value.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:b3d2834c-085b-40b9-bc2c-f395b4804156",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const multibase = 'z';\n          proofs.some(proof => {\n            const value = proof?.proofValue;\n            return value.startsWith(multibase) && shouldBeBs58(value);\n          }).should.equal(\n            true,\n            'Expected \"proof.proofValue\" to be multibase-encoded base58-btc ' +\n            'value.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:a13f069e-8b09-4dab-8fb9-af2e1328392b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.domain) {\n              const validType = isStringOrArrayOfStrings(proof.domain);\n              validType.should.equal(true, 'Expected ' +\n                '\"proof.domain\" to be either a string or an unordered ' +\n                'set of strings.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:01182b2b-b9ae-4995-beb3-9d3a6b29796b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.domain) {\n              const validType = isStringOrArrayOfStrings(proof.domain);\n              validType.should.equal(true, 'Expected ' +\n                '\"proof.domain\" to be either a string or an unordered ' +\n                'set of strings.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:1d608745-de87-4f74-afd0-0aeab4c12b3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          for(const proof of proofs) {\n            if(proof.domain) {\n              const validType = isStringOrArrayOfStrings(proof.domain);\n              validType.should.equal(true, 'Expected ' +\n                '\"proof.domain\" to be either a string or an unordered ' +\n                'set of strings.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:508bde27-d257-4922-b62c-d19746a611bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.challenge) {\n                // domain must be specified\n                should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n                  'to be specified.');\n                proof.challenge.should.be.a('string', 'Expected ' +\n                  '\"proof.challenge\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:d5b451bf-f6dd-4b94-b73a-5cd065f40e4b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.challenge) {\n                // domain must be specified\n                should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n                  'to be specified.');\n                proof.challenge.should.be.a('string', 'Expected ' +\n                  '\"proof.challenge\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:c17b4e9f-464b-47d8-8183-16577c65dc4b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.challenge) {\n                // domain must be specified\n                should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n                  'to be specified.');\n                proof.challenge.should.be.a('string', 'Expected ' +\n                  '\"proof.challenge\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:b41fbb79-ce77-4e7b-9982-b5a0f48712f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.previousProof) {\n                proof.previousProof.should.be.a('string', 'Expected ' +\n                  '\"proof.previousProof\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:138bf47d-ec1b-415d-860f-943b9d7910c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.previousProof) {\n                proof.previousProof.should.be.a('string', 'Expected ' +\n                  '\"proof.previousProof\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:fa055962-f5f1-43e7-a415-a08817e71dfd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.previousProof) {\n                proof.previousProof.should.be.a('string', 'Expected ' +\n                  '\"proof.previousProof\" to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:e264a1a2-6e37-4efe-8f4c-53e77b6ae8a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.nonce) {\n                proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n                  'to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "NeWYRaFGrMpKqb5BfyiTA",
              "ctx": null,
              "_testId": "urn:uuid:0511c5f5-dae2-4950-8d04-ef0cf0235dee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.nonce) {\n                proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n                  'to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "HdsClWZC92N9_oKhcFpks",
              "ctx": null,
              "_testId": "urn:uuid:5ee0d54c-6454-47de-b497-e90625afed1c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            for(const proof of proofs) {\n              if(proof.nonce) {\n                proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n                  'to be a string.');\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "DMlAgXRx_1dy4ugZIlAK6",
              "ctx": null,
              "_testId": "urn:uuid:d26fef12-1feb-4192-9ece-601ca112d846",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-2019 (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-2019\".",
              "body": "function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"cryptosuite\" property ' +\n            '\"ecdsa-2019\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:b40211ea-28b6-4cd6-9e78-f6273d55a86a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-2019\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId: name, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:f4fca296-20e3-44be-8ad9-3e675ce273ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"type\" property value ' +\n              '\"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:684e036b-1dfb-4274-bff9-fa203a1c2f80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"controller\" of the verification method MUST exist and MUST be a valid URL.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql(0, 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.forEach(verificationMethodDocument => {\n            should.exist(verificationMethodDocument, 'Expected dereferencing ' +\n              '\"verificationMethod\" to return a document.');\n            const {controller} = verificationMethodDocument;\n            should.exist(controller, 'Expected \"controller\" of the ' +\n              'verification method to exist.');\n            let result;\n            let err;\n            try {\n              result = new URL(controller);\n            } catch(e) {\n              err = e;\n            }\n            should.not.exist(err, 'Expected URL check of the \"controller\" of ' +\n              'the verification method to not error.');\n            should.exist(result, 'Expected the controller of the ' +\n              'verification method to be a valid URL.');\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:2f0deb22-8125-4b7d-a3c1-bb3e53b9ac38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"controller\" of the verification method MUST exist and MUST be a valid URL."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument => {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              return publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase) &&\n                shouldBeMulticodecEncoded(publicKeyMultibase);\n            }\n          ).should.equal(\n            true,\n            'Expected at \"publicKeyMultibase\" to to be MULTIBASE formatted ' +\n            'and MULTICODEC encoded.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:c02559fb-0a07-4e52-a870-39c4d7e0fc67",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2537,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc});\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "AZWLJWHVu0uDmY7bcB4CU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:ccc483b1-9818-4b98-ab5f-cd8f83bccdf1"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-2019\".",
              "body": "function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"cryptosuite\" property ' +\n            '\"ecdsa-2019\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:5fee707e-7f62-4739-931d-df98290a4eb8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId: name, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:aa9b4f78-e767-481b-ae02-3d7835f04797",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"type\" property value ' +\n              '\"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:68246e3b-4272-4b92-8a50-7209032deb11",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"controller\" of the verification method MUST exist and MUST be a valid URL.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql(0, 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.forEach(verificationMethodDocument => {\n            should.exist(verificationMethodDocument, 'Expected dereferencing ' +\n              '\"verificationMethod\" to return a document.');\n            const {controller} = verificationMethodDocument;\n            should.exist(controller, 'Expected \"controller\" of the ' +\n              'verification method to exist.');\n            let result;\n            let err;\n            try {\n              result = new URL(controller);\n            } catch(e) {\n              err = e;\n            }\n            should.not.exist(err, 'Expected URL check of the \"controller\" of ' +\n              'the verification method to not error.');\n            should.exist(result, 'Expected the controller of the ' +\n              'verification method to be a valid URL.');\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:c2eb527c-7777-4198-8c78-c8d2db9594d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"controller\" of the verification method MUST exist and MUST be a valid URL."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument => {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              return publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase) &&\n                shouldBeMulticodecEncoded(publicKeyMultibase);\n            }\n          ).should.equal(\n            true,\n            'Expected at \"publicKeyMultibase\" to to be MULTIBASE formatted ' +\n            'and MULTICODEC encoded.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:ceaba343-bcd3-402d-a916-313449809e01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc});\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2537,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "AZWLJWHVu0uDmY7bcB4CU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:e8c4d29f-8f9b-4fd9-9f8e-c5ed198f1175"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-2019\".",
              "body": "function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"cryptosuite\" property ' +\n            '\"ecdsa-2019\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:19a0d57f-aa2a-4e27-a166-c600111cd99f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId: name, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:cf64cbe1-73db-456b-8ef0-76f830d45146",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2790,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"type\" property value ' +\n              '\"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:d460cf07-ffaa-4121-abfe-afdac68f3fb8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"controller\" of the verification method MUST exist and MUST be a valid URL.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql(0, 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.forEach(verificationMethodDocument => {\n            should.exist(verificationMethodDocument, 'Expected dereferencing ' +\n              '\"verificationMethod\" to return a document.');\n            const {controller} = verificationMethodDocument;\n            should.exist(controller, 'Expected \"controller\" of the ' +\n              'verification method to exist.');\n            let result;\n            let err;\n            try {\n              result = new URL(controller);\n            } catch(e) {\n              err = e;\n            }\n            should.not.exist(err, 'Expected URL check of the \"controller\" of ' +\n              'the verification method to not error.');\n            should.exist(result, 'Expected the controller of the ' +\n              'verification method to be a valid URL.');\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:82b368bd-9c0f-41c9-baf7-94ada92fd588",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"controller\" of the verification method MUST exist and MUST be a valid URL."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument => {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              return publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase) &&\n                shouldBeMulticodecEncoded(publicKeyMultibase);\n            }\n          ).should.equal(\n            true,\n            'Expected at \"publicKeyMultibase\" to to be MULTIBASE formatted ' +\n            'and MULTICODEC encoded.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:e8a4610e-9bca-423d-bcfc-a568cac315e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc});\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "AZWLJWHVu0uDmY7bcB4CU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:d357dc79-a4c0-445f-9c55-7fd5a1152be0"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "oD2T__H5se276wVwLw8AE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:b575daee-8ab5-431e-a935-e0282d034caf",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-2019\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-2019\".",
              "body": "function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"cryptosuite\" property ' +\n            '\"ecdsa-2019\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:b40211ea-28b6-4cd6-9e78-f6273d55a86a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-2019\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-2019\".",
              "body": "function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"cryptosuite\" property ' +\n            '\"ecdsa-2019\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:5fee707e-7f62-4739-931d-df98290a4eb8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-2019\".",
              "body": "function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"cryptosuite\" property ' +\n            '\"ecdsa-2019\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:19a0d57f-aa2a-4e27-a166-c600111cd99f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId: name, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:f4fca296-20e3-44be-8ad9-3e675ce273ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId: name, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:aa9b4f78-e767-481b-ae02-3d7835f04797",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId: name, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:cf64cbe1-73db-456b-8ef0-76f830d45146",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2790,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"type\" property value ' +\n              '\"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:684e036b-1dfb-4274-bff9-fa203a1c2f80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"type\" property value ' +\n              '\"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:68246e3b-4272-4b92-8a50-7209032deb11",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(\n            true,\n            'Expected at least one proof to have \"type\" property value ' +\n              '\"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:d460cf07-ffaa-4121-abfe-afdac68f3fb8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"controller\" of the verification method MUST exist and MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "The \"controller\" of the verification method MUST exist and MUST be a valid URL.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql(0, 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.forEach(verificationMethodDocument => {\n            should.exist(verificationMethodDocument, 'Expected dereferencing ' +\n              '\"verificationMethod\" to return a document.');\n            const {controller} = verificationMethodDocument;\n            should.exist(controller, 'Expected \"controller\" of the ' +\n              'verification method to exist.');\n            let result;\n            let err;\n            try {\n              result = new URL(controller);\n            } catch(e) {\n              err = e;\n            }\n            should.not.exist(err, 'Expected URL check of the \"controller\" of ' +\n              'the verification method to not error.');\n            should.exist(result, 'Expected the controller of the ' +\n              'verification method to be a valid URL.');\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:2f0deb22-8125-4b7d-a3c1-bb3e53b9ac38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"controller\" of the verification method MUST exist and MUST be a valid URL."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"controller\" of the verification method MUST exist and MUST be a valid URL.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql(0, 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.forEach(verificationMethodDocument => {\n            should.exist(verificationMethodDocument, 'Expected dereferencing ' +\n              '\"verificationMethod\" to return a document.');\n            const {controller} = verificationMethodDocument;\n            should.exist(controller, 'Expected \"controller\" of the ' +\n              'verification method to exist.');\n            let result;\n            let err;\n            try {\n              result = new URL(controller);\n            } catch(e) {\n              err = e;\n            }\n            should.not.exist(err, 'Expected URL check of the \"controller\" of ' +\n              'the verification method to not error.');\n            should.exist(result, 'Expected the controller of the ' +\n              'verification method to be a valid URL.');\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:c2eb527c-7777-4198-8c78-c8d2db9594d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"controller\" of the verification method MUST exist and MUST be a valid URL."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"controller\" of the verification method MUST exist and MUST be a valid URL.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql(0, 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.forEach(verificationMethodDocument => {\n            should.exist(verificationMethodDocument, 'Expected dereferencing ' +\n              '\"verificationMethod\" to return a document.');\n            const {controller} = verificationMethodDocument;\n            should.exist(controller, 'Expected \"controller\" of the ' +\n              'verification method to exist.');\n            let result;\n            let err;\n            try {\n              result = new URL(controller);\n            } catch(e) {\n              err = e;\n            }\n            should.not.exist(err, 'Expected URL check of the \"controller\" of ' +\n              'the verification method to not error.');\n            should.exist(result, 'Expected the controller of the ' +\n              'verification method to be a valid URL.');\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:82b368bd-9c0f-41c9-baf7-94ada92fd588",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"controller\" of the verification method MUST exist and MUST be a valid URL."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument => {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              return publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase) &&\n                shouldBeMulticodecEncoded(publicKeyMultibase);\n            }\n          ).should.equal(\n            true,\n            'Expected at \"publicKeyMultibase\" to to be MULTIBASE formatted ' +\n            'and MULTICODEC encoded.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "pOSHqBhFVKDwGIXhsTvSw",
              "ctx": null,
              "_testId": "urn:uuid:c02559fb-0a07-4e52-a870-39c4d7e0fc67",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2537,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument => {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              return publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase) &&\n                shouldBeMulticodecEncoded(publicKeyMultibase);\n            }\n          ).should.equal(\n            true,\n            'Expected at \"publicKeyMultibase\" to to be MULTIBASE formatted ' +\n            'and MULTICODEC encoded.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "IIA_4S0z9dFwzSvvbqwxY",
              "ctx": null,
              "_testId": "urn:uuid:ceaba343-bcd3-402d-a916-313449809e01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n          this.test.cell = {columnId: name, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            '\"verificationMethodDocuments\" to not be empty.');\n          verificationMethodDocuments.some(\n            verificationMethodDocument => {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              return publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase) &&\n                shouldBeMulticodecEncoded(publicKeyMultibase);\n            }\n          ).should.equal(\n            true,\n            'Expected at \"publicKeyMultibase\" to to be MULTIBASE formatted ' +\n            'and MULTICODEC encoded.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-create.js",
              "parent": "XaWFpEgrn4GNDRUb98iXx",
              "ctx": null,
              "_testId": "urn:uuid:e8a4610e-9bca-423d-bcfc-a568cac315e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:74e62829-2df7-43d0-b034-4c7b5d631a77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4187,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            credential.proof = null;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:d2ddf0b2-2efe-4542-9e59-1ae8f0d715a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7499,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof.type;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:06e0039e-4a5a-40dd-9680-f4da59fe9217",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7737,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:7fcaf38f-91af-407b-adb2-669fec0e3ad2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:4ace2991-7832-403a-82b8-a816bebbe47b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8196,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:5adc1dcb-0bbb-4b97-824a-d8a66c0757da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:a60ab488-8c90-4e3a-9bf5-5de9722fc9f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:9fc6da94-dca1-41de-846b-1c41fbbb5913",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 224,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          await verificationFail({\n            credential, verifier, options: {\n              // this will fail since the vc generated is created with the\n              // assertionMethod proof purpose.\n              expectedProofPurpose: 'authentication'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:94396655-0148-4d30-b6e8-8a36852b5f80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9258,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // proofValue is added after signing so we can\n          // safely delete it for this test\n          const credential = credentials.clone('issuedVc');\n          delete credential.proof.proofValue;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:cf6862af-7976-4579-bec4-f863d90c0f02",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9461,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // null should be an invalid proofValue for almost any proof\n          const credential = credentials.clone('issuedVc');\n          credential.proof.proofValue = null;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:b19d0a7a-8619-4cf3-87fe-2c7a8eb15f29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9775,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // FIXME: Fix test to check if a cryptographic suite requires the\n          // “proof.created” value\n          const credential = credentials.clone('invalidCreated');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:aca21b43-56c7-442f-8b7a-c151b4f87869",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10064,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          // remove the initial z\n          credential.proof.proofValue = credential.proof.proofValue.slice(1);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:0013bacc-cdc5-4938-a5c2-f2e826b8e713",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidDomain');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:54d41f1d-3521-4ed2-b8e0-3051108f0be5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10561,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 156,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidChallenge');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example',\n              challenge: '1235abcd6789'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:d19fa33a-70fe-4840-b464-50c86c8f860e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          credentials = await generateTestData();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2794,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2WJ5qq4_CWzjnmOQEBtHT",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:d0300199-218e-4808-bf4b-880649658cd0"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:025f8f3e-32a1-4e62-a36f-583fd885017d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 311,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            credential.proof = null;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:c3aa7f60-bc77-4569-a1d9-db9270d0eccb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11603,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof.type;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:61af9929-8a5a-4c5f-a674-03303cdccde9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:a6477745-6a1a-449c-9586-05831b7cdb02",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12122,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:de23a17a-9b0e-4ce5-a470-33efbcfcfc57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:4dcd9d64-f13c-4271-a009-091dadc023cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:129ee2d3-55a7-4f88-91b1-c259baff5410",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:95b25cfb-c812-435a-a646-32938f4105da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          await verificationFail({\n            credential, verifier, options: {\n              // this will fail since the vc generated is created with the\n              // assertionMethod proof purpose.\n              expectedProofPurpose: 'authentication'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:ba47073a-b36f-47c8-b0d8-962d8a26ffe9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:341:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // proofValue is added after signing so we can\n          // safely delete it for this test\n          const credential = credentials.clone('issuedVc');\n          delete credential.proof.proofValue;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:ab0e9366-28e0-4aee-9528-490cdf165d45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13546,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // null should be an invalid proofValue for almost any proof\n          const credential = credentials.clone('issuedVc');\n          credential.proof.proofValue = null;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:616940e9-1ec0-4876-843f-533387751c1d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13781,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // FIXME: Fix test to check if a cryptographic suite requires the\n          // “proof.created” value\n          const credential = credentials.clone('invalidCreated');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:92172978-189d-4d12-b9fe-5c3891bc546f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14022,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:372:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          // remove the initial z\n          credential.proof.proofValue = credential.proof.proofValue.slice(1);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:522884d1-cd58-42d3-87b6-17938e49ea4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidDomain');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:44ab604a-1dcf-4ee0-b122-a88a0d529a15",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidChallenge');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example',\n              challenge: '1235abcd6789'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:165d8fe1-28c5-4fb4-802e-b8c31eb3e6ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          credentials = await generateTestData();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11021,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2WJ5qq4_CWzjnmOQEBtHT",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:43efccad-715e-44bb-8e45-abbd72b225d4"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:1bceeed9-8f76-4b68-b099-95648fe9f1b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 497,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            credential.proof = null;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:5f910ec0-acc1-4f29-90a4-14f46ca68d7f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15635,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof.type;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:068aa246-5b9c-4d43-a82c-5044952c4f3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15887,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:0a594772-ad71-4fa2-98c1-0b171e4bd3f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16122,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:2d876f50-1dce-4e47-a35b-e4bfddd07e93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16345,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:62c3e33b-0a5c-43c5-933d-ff8f78c1d51a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:cb06e61e-2e52-4b25-83b6-329834ecb8aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16794,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:2e005f84-e990-4db4-a77b-6dd7c7b8ef93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          await verificationFail({\n            credential, verifier, options: {\n              // this will fail since the vc generated is created with the\n              // assertionMethod proof purpose.\n              expectedProofPurpose: 'authentication'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:a24ff0d8-ba51-456e-bdd5-11eb21a5c1ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17312,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // proofValue is added after signing so we can\n          // safely delete it for this test\n          const credential = credentials.clone('issuedVc');\n          delete credential.proof.proofValue;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:708bc0e6-1246-41eb-9823-8ed859463f11",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17547,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // null should be an invalid proofValue for almost any proof\n          const credential = credentials.clone('issuedVc');\n          credential.proof.proofValue = null;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:ec4daad6-9b84-46a0-b8a8-801655ffa733",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // FIXME: Fix test to check if a cryptographic suite requires the\n          // “proof.created” value\n          const credential = credentials.clone('invalidCreated');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:12c5ddf7-d63c-4a2a-ac6f-f016c9166a8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 312,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          // remove the initial z\n          credential.proof.proofValue = credential.proof.proofValue.slice(1);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:0d65c1e5-2025-4bba-b900-a96533efab88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidDomain');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:ffaa4e8f-1bad-420b-a1bc-183cc73d0642",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidChallenge');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example',\n              challenge: '1235abcd6789'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:dc42b68e-8bba-4e89-b1da-448ca34096cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          credentials = await generateTestData();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14831,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2WJ5qq4_CWzjnmOQEBtHT",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:2e8f56b6-66d4-4a76-a21e-d39806ad93e6"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "JkqvpFRyOoB6xC4SrIf8M",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:0287040d-1e62-4d90-b56d-38023be20750",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:74e62829-2df7-43d0-b034-4c7b5d631a77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4187,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:025f8f3e-32a1-4e62-a36f-583fd885017d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 311,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:1bceeed9-8f76-4b68-b099-95648fe9f1b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 497,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            credential.proof = null;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:d2ddf0b2-2efe-4542-9e59-1ae8f0d715a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7499,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            credential.proof = null;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:c3aa7f60-bc77-4569-a1d9-db9270d0eccb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11603,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            credential.proof = null;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:5f910ec0-acc1-4f29-90a4-14f46ca68d7f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15635,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof.type;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:06e0039e-4a5a-40dd-9680-f4da59fe9217",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7737,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof.type;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:61af9929-8a5a-4c5f-a674-03303cdccde9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {columnId: vendorName, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            delete credential.proof.type;\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:068aa246-5b9c-4d43-a82c-5044952c4f3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15887,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:7fcaf38f-91af-407b-adb2-669fec0e3ad2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:a6477745-6a1a-449c-9586-05831b7cdb02",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12122,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:0a594772-ad71-4fa2-98c1-0b171e4bd3f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16122,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:4ace2991-7832-403a-82b8-a816bebbe47b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8196,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:de23a17a-9b0e-4ce5-a470-33efbcfcfc57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:2d876f50-1dce-4e47-a35b-e4bfddd07e93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16345,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:5adc1dcb-0bbb-4b97-824a-d8a66c0757da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:4dcd9d64-f13c-4271-a009-091dadc023cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidVm');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:62c3e33b-0a5c-43c5-933d-ff8f78c1d51a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:a60ab488-8c90-4e3a-9bf5-5de9722fc9f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:129ee2d3-55a7-4f88-91b1-c259baff5410",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('noProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:cb06e61e-2e52-4b25-83b6-329834ecb8aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16794,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:9fc6da94-dca1-41de-846b-1c41fbbb5913",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 224,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:95b25cfb-c812-435a-a646-32938f4105da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidProofPurpose');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:2e005f84-e990-4db4-a77b-6dd7c7b8ef93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          await verificationFail({\n            credential, verifier, options: {\n              // this will fail since the vc generated is created with the\n              // assertionMethod proof purpose.\n              expectedProofPurpose: 'authentication'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:94396655-0148-4d30-b6e8-8a36852b5f80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9258,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          await verificationFail({\n            credential, verifier, options: {\n              // this will fail since the vc generated is created with the\n              // assertionMethod proof purpose.\n              expectedProofPurpose: 'authentication'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:ba47073a-b36f-47c8-b0d8-962d8a26ffe9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:341:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          await verificationFail({\n            credential, verifier, options: {\n              // this will fail since the vc generated is created with the\n              // assertionMethod proof purpose.\n              expectedProofPurpose: 'authentication'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:a24ff0d8-ba51-456e-bdd5-11eb21a5c1ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17312,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // proofValue is added after signing so we can\n          // safely delete it for this test\n          const credential = credentials.clone('issuedVc');\n          delete credential.proof.proofValue;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:cf6862af-7976-4579-bec4-f863d90c0f02",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9461,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // proofValue is added after signing so we can\n          // safely delete it for this test\n          const credential = credentials.clone('issuedVc');\n          delete credential.proof.proofValue;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:ab0e9366-28e0-4aee-9528-490cdf165d45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13546,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // proofValue is added after signing so we can\n          // safely delete it for this test\n          const credential = credentials.clone('issuedVc');\n          delete credential.proof.proofValue;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:708bc0e6-1246-41eb-9823-8ed859463f11",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17547,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // null should be an invalid proofValue for almost any proof\n          const credential = credentials.clone('issuedVc');\n          credential.proof.proofValue = null;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:b19d0a7a-8619-4cf3-87fe-2c7a8eb15f29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9775,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // null should be an invalid proofValue for almost any proof\n          const credential = credentials.clone('issuedVc');\n          credential.proof.proofValue = null;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:616940e9-1ec0-4876-843f-533387751c1d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13781,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // null should be an invalid proofValue for almost any proof\n          const credential = credentials.clone('issuedVc');\n          credential.proof.proofValue = null;\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:ec4daad6-9b84-46a0-b8a8-801655ffa733",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // FIXME: Fix test to check if a cryptographic suite requires the\n          // “proof.created” value\n          const credential = credentials.clone('invalidCreated');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:aca21b43-56c7-442f-8b7a-c151b4f87869",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10064,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // FIXME: Fix test to check if a cryptographic suite requires the\n          // “proof.created” value\n          const credential = credentials.clone('invalidCreated');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:92172978-189d-4d12-b9fe-5c3891bc546f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14022,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:372:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          // FIXME: Fix test to check if a cryptographic suite requires the\n          // “proof.created” value\n          const credential = credentials.clone('invalidCreated');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:12c5ddf7-d63c-4a2a-ac6f-f016c9166a8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 312,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          // remove the initial z\n          credential.proof.proofValue = credential.proof.proofValue.slice(1);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:0013bacc-cdc5-4938-a5c2-f2e826b8e713",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          // remove the initial z\n          credential.proof.proofValue = credential.proof.proofValue.slice(1);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:522884d1-cd58-42d3-87b6-17938e49ea4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          // remove the initial z\n          credential.proof.proofValue = credential.proof.proofValue.slice(1);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:0d65c1e5-2025-4bba-b900-a96533efab88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidDomain');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:54d41f1d-3521-4ed2-b8e0-3051108f0be5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10561,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 156,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidDomain');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:44ab604a-1dcf-4ee0-b122-a88a0d529a15",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidDomain');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:ffaa4e8f-1bad-420b-a1bc-183cc73d0642",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidChallenge');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example',\n              challenge: '1235abcd6789'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "iIq01ShGuHQFCw3QCcpRu",
              "ctx": null,
              "_testId": "urn:uuid:d19fa33a-70fe-4840-b464-50c86c8f860e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidChallenge');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example',\n              challenge: '1235abcd6789'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "HNbg6vumOHZvCN4Wt4Bxu",
              "ctx": null,
              "_testId": "urn:uuid:165d8fe1-28c5-4fb4-802e-b8c31eb3e6ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId: vendorName, rowId: this.test.title};\n          const credential = credentials.clone('invalidChallenge');\n          await verificationFail({\n            credential, verifier, options: {\n              domain: 'domain.example',\n              challenge: '1235abcd6789'\n            }\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "SRy1b62o1CNdmolX0KjuC",
              "ctx": null,
              "_testId": "urn:uuid:dc42b68e-8bba-4e89-b1da-448ca34096cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-2019 cryptosuite (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-2019 proof",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "4wzMQ3mmesgjkl_HUfTxc",
              "ctx": null,
              "_testId": "urn:uuid:ded38f2c-6db3-4f87-84f9-fb79a05d0853",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC with an ecdsa-2019 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19215,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 411,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          credential.proof.cryptosuite = 'not-ecdsa-2019';\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "4wzMQ3mmesgjkl_HUfTxc",
              "ctx": null,
              "_testId": "urn:uuid:65fcc573-870f-4241-9bfd-96698a9cba5e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 166,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "h3jx2YQ2cSJzMq4kimfCT",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:f5611ad2-4d09-4af2-9a87-6d47bacd9d95"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-2019 proof",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "j4BWSFxOXqd8L-HMnftiE",
              "ctx": null,
              "_testId": "urn:uuid:af3b034d-7f1e-486f-9ad8-1d764657799f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with an ecdsa-2019 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          credential.proof.cryptosuite = 'not-ecdsa-2019';\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "j4BWSFxOXqd8L-HMnftiE",
              "ctx": null,
              "_testId": "urn:uuid:249db950-9b42-4ecd-b80c-47cd9dab22a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "h3jx2YQ2cSJzMq4kimfCT",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:c5d3588f-2858-40db-b524-858df2e88815"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-2019 proof",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "MkgYdGDybQQ8FJYj0tvQY",
              "ctx": null,
              "_testId": "urn:uuid:c494809f-9793-45a5-b75f-03d8712967cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC with an ecdsa-2019 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          credential.proof.cryptosuite = 'not-ecdsa-2019';\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "MkgYdGDybQQ8FJYj0tvQY",
              "ctx": null,
              "_testId": "urn:uuid:330288a0-b233-4789-ba62-f056ba9d3a68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "h3jx2YQ2cSJzMq4kimfCT",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:0b1fa76d-ae5e-4914-b0d9-bbaf68e3e835"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "JkqvpFRyOoB6xC4SrIf8M",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:f535c522-30dc-4e8d-a9a0-d8aa4c418807",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-2019 proof",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-2019 proof",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "4wzMQ3mmesgjkl_HUfTxc",
              "ctx": null,
              "_testId": "urn:uuid:ded38f2c-6db3-4f87-84f9-fb79a05d0853",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC with an ecdsa-2019 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19215,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 411,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-2019 proof",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "j4BWSFxOXqd8L-HMnftiE",
              "ctx": null,
              "_testId": "urn:uuid:af3b034d-7f1e-486f-9ad8-1d764657799f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with an ecdsa-2019 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-2019 proof",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "MkgYdGDybQQ8FJYj0tvQY",
              "ctx": null,
              "_testId": "urn:uuid:c494809f-9793-45a5-b75f-03d8712967cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC with an ecdsa-2019 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          credential.proof.cryptosuite = 'not-ecdsa-2019';\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "4wzMQ3mmesgjkl_HUfTxc",
              "ctx": null,
              "_testId": "urn:uuid:65fcc573-870f-4241-9bfd-96698a9cba5e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 166,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          credential.proof.cryptosuite = 'not-ecdsa-2019';\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "j4BWSFxOXqd8L-HMnftiE",
              "ctx": null,
              "_testId": "urn:uuid:249db950-9b42-4ecd-b80c-47cd9dab22a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          credential.proof.cryptosuite = 'not-ecdsa-2019';\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-verify.js",
              "parent": "MkgYdGDybQQ8FJYj0tvQY",
              "ctx": null,
              "_testId": "urn:uuid:330288a0-b233-4789-ba62-f056ba9d3a68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-2019 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-2019 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      issuedVc = await createInitialVc({issuer, vc});\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "SyvALUWdsCRS63Kke44Wa",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 20900,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 126,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-2019 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      issuedVc = await createInitialVc({issuer, vc});\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "SyvALUWdsCRS63Kke44Wa",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 21026,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 127,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-2019 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      issuedVc = await createInitialVc({issuer, vc});\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "SyvALUWdsCRS63Kke44Wa",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 21153,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 102,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "K0aIkUuAL-eCimzwlG7VZ",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:99da77c5-afdf-47cd-85d5-89205b791753",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "apicatalog.com",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
              "parent": "SyvALUWdsCRS63Kke44Wa",
              "ctx": null,
              "_testId": "urn:uuid:2c36a799-20a5-4b49-92b9-601cf908e485",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 367,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
              "parent": "SyvALUWdsCRS63Kke44Wa",
              "ctx": null,
              "_testId": "urn:uuid:c96e4f22-44fc-46d8-8012-a643b8bcf90b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21622,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
              "parent": "SyvALUWdsCRS63Kke44Wa",
              "ctx": null,
              "_testId": "urn:uuid:a67b1551-d615-451a-a66d-cda16bd7dfac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
              "parent": "SyvALUWdsCRS63Kke44Wa",
              "ctx": null,
              "_testId": "urn:uuid:8724b079-fc90-4400-b11d-f7378f77cc06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 191,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
              "parent": "SyvALUWdsCRS63Kke44Wa",
              "ctx": null,
              "_testId": "urn:uuid:2320b030-8d3e-44c0-b16e-c6a8c573d411",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
              "parent": "SyvALUWdsCRS63Kke44Wa",
              "ctx": null,
              "_testId": "urn:uuid:ecb7d0e4-647d-49d7-829a-2c9fe887d028",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22117,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "SpruceID",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
              "parent": "SyvALUWdsCRS63Kke44Wa",
              "ctx": null,
              "_testId": "urn:uuid:52ff1232-bd37-4427-842d-a8d9c02e2e66",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 403,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
              "parent": "SyvALUWdsCRS63Kke44Wa",
              "ctx": null,
              "_testId": "urn:uuid:b1a0c7f0-64e3-4b6d-92eb-9b6c2428d17e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22622,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-interop.js",
              "parent": "SyvALUWdsCRS63Kke44Wa",
              "ctx": null,
              "_testId": "urn:uuid:f7aad3cf-e85a-4a22-b0f0-90c81de3df4b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "vc-di-ecdsa-test-suite",
    "subtitle": "Interoperability test suite for ECDSA Data Integrity cryptosuites.",
    "github": "https://github.com/w3c-ccg/vc-di-ecdsa-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/vc-di-ecdsa-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity ecdsa 2019 Interoperability Report 1.0",
  "stats": [
    "Tests passed 115/120 95%",
    "Tests failed 5/120 5%",
    "Failures 5",
    "Tests skipped 0",
    "Total tests 120"
  ]
}